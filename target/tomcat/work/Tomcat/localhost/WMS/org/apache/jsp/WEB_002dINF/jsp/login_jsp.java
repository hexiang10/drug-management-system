/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.37
 * Generated at: 2021-04-18 17:28:32 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class login_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n");
      out.write("<title>登陆</title>\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\"\n");
      out.write("\thref=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/css/bootstrap.min.css\">\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\"\n");
      out.write("\thref=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/css/model/login/login.css\">\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\t<!-- 定义容器 -->\n");
      out.write("\t<div class=\"container\">\n");
      out.write("\t\t<div class=\"row\">\n");
      out.write("\t\t\t<div class=\"col-md-4 col-sm-3\"></div>\n");
      out.write("\n");
      out.write("\t\t\t<!-- 这一列为登陆表单 -->\n");
      out.write("\t\t\t<div class=\"col-md-4 col-sm-6\">\n");
      out.write("\t\t\t\t<div class=\"panel panel-default\">\n");
      out.write("\n");
      out.write("\t\t\t\t\t<!-- 登陆面板的标题 -->\n");
      out.write("\t\t\t\t\t<div class=\"panel-title\" style=\"text-align: center\">\n");
      out.write("\t\t\t\t\t\t<h2>登录</h2>\n");
      out.write("\t\t\t\t\t</div>\n");
      out.write("\n");
      out.write("\t\t\t\t\t<!-- 登陆面板的主体 -->\n");
      out.write("\t\t\t\t\t<div class=\"panel-body\">\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t<!-- 表单 -->\n");
      out.write("\t\t\t\t\t\t<form id=\"login_form\" class=\"form-horizontal\" style=\"\">\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\t<div class=\"form-group\">\n");
      out.write("\t\t\t\t\t\t\t\t<label class=\"control-label col-md-4 col-sm-4\">用户ID：</label>\n");
      out.write("\t\t\t\t\t\t\t\t<div class=\"col-md-7 col-sm-7\">\n");
      out.write("\t\t\t\t\t\t\t\t\t<input type=\"text\" id=\"userID\" class=\"form-control\"\n");
      out.write("\t\t\t\t\t\t\t\t\t\tplaceholder=\"用户ID\" name=\"userID\" />\n");
      out.write("\t\t\t\t\t\t\t\t</div>\n");
      out.write("\t\t\t\t\t\t\t</div>\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\t<div class=\"form-group\">\n");
      out.write("\t\t\t\t\t\t\t\t<label class=\"control-label col-md-4 col-sm-4\"> <!-- <span class=\"glyphicon glyphicon-lock\"></span> -->\n");
      out.write("\t\t\t\t\t\t\t\t\t密码：\n");
      out.write("\t\t\t\t\t\t\t\t</label>\n");
      out.write("\t\t\t\t\t\t\t\t<div class=\"col-md-7 col-sm-7\">\n");
      out.write("\t\t\t\t\t\t\t\t\t<input type=\"password\" id=\"password\" class=\"form-control\"\n");
      out.write("\t\t\t\t\t\t\t\t\t\tplaceholder=\"密码\" name=\"password\">\n");
      out.write("\t\t\t\t\t\t\t\t</div>\n");
      out.write("\t\t\t\t\t\t\t</div>\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\t<div class=\"form-group\">\n");
      out.write("\t\t\t\t\t\t\t\t<label class=\"control-label col-md-4 col-sm-4\"> <!-- <span class=\"glyphicon glyphicon-lock\"></span> -->\n");
      out.write("\t\t\t\t\t\t\t\t\t验证码：\n");
      out.write("\t\t\t\t\t\t\t\t</label>\n");
      out.write("\t\t\t\t\t\t\t\t<div class=\"col-md-5 col-sm-4\">\n");
      out.write("\t\t\t\t\t\t\t\t\t<input type=\"text\" id=\"checkCode\" class=\"form-control\"\n");
      out.write("\t\t\t\t\t\t\t\t\t\tplaceholder=\"验证码\" name=\"checkCode\">\n");
      out.write("\t\t\t\t\t\t\t\t</div>\n");
      out.write("\t\t\t\t\t\t\t\t<div>\n");
      out.write("\t\t\t\t\t\t\t\t\t<img id=\"checkCodeImg\" alt=\"checkCodeImg\"\n");
      out.write("\t\t\t\t\t\t\t\t\t\tsrc=\"account/checkCode/1\">\n");
      out.write("\t\t\t\t\t\t\t\t</div>\n");
      out.write("\t\t\t\t\t\t\t</div>\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\t<div>\n");
      out.write("\t\t\t\t\t\t\t\t<div class=\"col-md-4 col-sm-4\"></div>\n");
      out.write("\t\t\t\t\t\t\t\t<div class=\"col-md-4 col-sm-4\">\n");
      out.write("\t\t\t\t\t\t\t\t\t<button id=\"submit\" type=\"submit\" class=\"btn btn-primary\">\n");
      out.write("\t\t\t\t\t\t\t\t\t\t&nbsp;&nbsp;&nbsp;&nbsp;登陆&nbsp;&nbsp;&nbsp;&nbsp;</button>\n");
      out.write("\t\t\t\t\t\t\t\t</div>\n");
      out.write("\t\t\t\t\t\t\t\t<div class=\"col-md-4 col-sm-4\"></div>\n");
      out.write("\t\t\t\t\t\t\t</div>\n");
      out.write("\t\t\t\t\t\t</form>\n");
      out.write("\t\t\t\t\t</div>\n");
      out.write("\t\t\t\t</div>\n");
      out.write("\t\t\t</div>\n");
      out.write("\n");
      out.write("\t\t\t<div class=\"col-md-4 col-sm-3\"></div>\n");
      out.write("\t\t</div>\n");
      out.write("\t</div>\n");
      out.write("\n");
      out.write("\t<script type=\"text/javascript\"\n");
      out.write("\t\tsrc=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/js/jquery-2.2.3.min.js\"></script>\n");
      out.write("\t<script type=\"text/javascript\"\n");
      out.write("\t\tsrc=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/js/bootstrap.min.js\"></script>\n");
      out.write("\t<script type=\"text/javascript\"\n");
      out.write("\t\tsrc=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/js/bootstrapValidator.min.js\"></script>\n");
      out.write("\t<script type=\"text/javascript\"\n");
      out.write("\t\tsrc=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/js/jquery.md5.js\"></script>\n");
      out.write("\n");
      out.write("\t<script>\n");
      out.write("\t\t$(function() {\n");
      out.write("\t\t\tvalidatorInit();\n");
      out.write("\t\t\trefreshCheckCode();\n");
      out.write("\t\t});\n");
      out.write("\n");
      out.write("\t\t// 刷新图形验证码\n");
      out.write("\t\tfunction refreshCheckCode() {\n");
      out.write("\t\t\t$('#checkCodeImg').click(function() {\n");
      out.write("\t\t\t\tvar timestamp = new Date().getTime();\n");
      out.write("\t\t\t\t$(this).attr(\"src\", \"account/checkCode/\" + timestamp)\n");
      out.write("\t\t\t})\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// 登陆信息加密模块\n");
      out.write("\t\tfunction infoEncrypt(userID, password, checkCode) {\n");
      out.write("\t\t\tvar str1 = $.md5(password);\n");
      out.write("\t\t\tvar str2 = $.md5(str1 + userID);\n");
      out.write("\t\t\tvar str3 = $.md5(str2 + checkCode.toUpperCase());\n");
      out.write("\t\t\treturn str3;\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tfunction validatorInit() {\n");
      out.write("\t\t\t$('#login_form').bootstrapValidator({\n");
      out.write("\t\t\t\tmessage : 'This value is not valid',\n");
      out.write("\t\t\t\tfeedbackIcons : {\n");
      out.write("\t\t\t\t\tvalid : 'glyphicon glyphicon-ok',\n");
      out.write("\t\t\t\t\tinvalid : 'glyphicon glyphicon-remove',\n");
      out.write("\t\t\t\t\tvalidating : 'glyphicon glyphicon-refresh'\n");
      out.write("\t\t\t\t},\n");
      out.write("\t\t\t\tfields : {\n");
      out.write("\t\t\t\t\tuserID : {\n");
      out.write("\t\t\t\t\t\tvalidators : {\n");
      out.write("\t\t\t\t\t\t\tnotEmpty : {\n");
      out.write("\t\t\t\t\t\t\t\tmessage : '用户名不能为空'\n");
      out.write("\t\t\t\t\t\t\t},regexp: {\n");
      out.write("\t\t                        regexp: '[0-9]+',\n");
      out.write("\t\t                        message: '只允许输入数字'\n");
      out.write("\t\t                    },\n");
      out.write("\t\t\t\t\t\t\tcallback : {}\n");
      out.write("\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t},\n");
      out.write("\t\t\t\t\tpassword : {\n");
      out.write("\t\t\t\t\t\tvalidators : {\n");
      out.write("\t\t\t\t\t\t\tnotEmpty : {\n");
      out.write("\t\t\t\t\t\t\t\tmessage : '密码不能为空'\n");
      out.write("\t\t\t\t\t\t\t},\n");
      out.write("\t\t\t\t\t\t\tcallback : {}\n");
      out.write("\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t},\n");
      out.write("\t\t\t\t\tcheckCode : {\n");
      out.write("\t\t\t\t\t\tvalidators : {\n");
      out.write("\t\t\t\t\t\t\tnotEmpty : {\n");
      out.write("\t\t\t\t\t\t\t\tmessage : '验证码不能为空'\n");
      out.write("\t\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t})\n");
      out.write("\t\t\t.on('success.form.bv', function(e) {\n");
      out.write("\t\t\t\t// 禁用默认表单提交\n");
      out.write("\t\t\t\te.preventDefault();\n");
      out.write("\n");
      out.write("\t\t\t\t// 获取 form 实例\n");
      out.write("\t\t\t\tvar $form = $(e.target);\n");
      out.write("\t\t\t\t// 获取 bootstrapValidator 实例\n");
      out.write("\t\t\t\tvar bv = $form.data('bootstrapValidator');\n");
      out.write("\n");
      out.write("\t\t\t\t// 发送数据到后端 进行验证\n");
      out.write("\t\t\t\tvar userID = $('#userID').val();\n");
      out.write("\t\t\t\tvar password = $('#password').val();\n");
      out.write("\t\t\t\tvar checkCode = $('#checkCode').val();\n");
      out.write("\n");
      out.write("\t\t\t\t// 加密\n");
      out.write("\t\t\t\tpassword = infoEncrypt(userID, password, checkCode)\n");
      out.write("\n");
      out.write("\t\t\t\tvar data = {\n");
      out.write("\t\t\t\t\t\"id\" : userID,\n");
      out.write("\t\t\t\t\t\"password\" : password,\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t\t$.ajax({\n");
      out.write("\t\t\t\t\ttype:\"POST\",\n");
      out.write("\t\t\t\t\turl:\"account/login\",\n");
      out.write("\t\t\t\t\tdataType:\"json\",\n");
      out.write("\t\t\t\t\tcontentType:\"application/json\",\n");
      out.write("\t\t\t\t\tdata:JSON.stringify(data),\n");
      out.write("\t\t\t\t\tsuccess:function(response){\n");
      out.write("\t\t\t\t\t\t// 接收到后端响应\n");
      out.write("\t\t\t\t\t\t\n");
      out.write("\t\t\t\t\t\t// 分析返回的 JSON 数据\n");
      out.write("\t\t\t\t\t\tif(response.result == 'error'){\n");
      out.write("\t\t\t\t\t\t\tvar errorMessage;\n");
      out.write("\t\t\t\t\t\t\tvar field;\n");
      out.write("\t\t\t\t\t\t\tif(response.msg == \"unknownAccount\"){\n");
      out.write("\t\t\t\t\t\t\t\terrorMessage = \"用户名错误\";\n");
      out.write("\t\t\t\t\t\t\t\tfield = \"userID\";\n");
      out.write("\t\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t\t\telse if(response.msg == \"incorrectCredentials\"){\n");
      out.write("\t\t\t\t\t\t\t\terrorMessage = \"密码或验证码错误\";\n");
      out.write("\t\t\t\t\t\t\t\tfield = \"password\";\n");
      out.write("\t\t\t\t\t\t\t\t$('#password').val(\"\");\n");
      out.write("\t\t\t\t\t\t\t}else{\n");
      out.write("\t\t\t\t\t\t\t    errorMessage = \"服务器错误\";\n");
      out.write("                                field = \"password\";\n");
      out.write("                                $('#password').val(\"\");\n");
      out.write("\t\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t\t\t\t\n");
      out.write("\t\t\t\t\t\t\t// 更新 callback 错误信息，以及为错误对应的字段添加 错误信息\n");
      out.write("\t\t\t\t\t\t\tbv.updateMessage(field,'callback',errorMessage);\n");
      out.write("\t\t\t\t\t\t\tbv.updateStatus(field,'INVALID','callback');\n");
      out.write("\t\t\t\t\t\t\tbv.updateStatus(\"checkCode\",'INVALID','callback');\n");
      out.write("\t\t\t\t\t\t\t\n");
      out.write("\t\t\t\t\t\t\t$('#checkCodeImg').attr(\"src\",\"account/checkCode/\" + new Date().getTime());\n");
      out.write("\t\t\t\t\t\t\t$('#checkCode').val(\"\");\n");
      out.write("\t\t\t\t\t\t}else{\n");
      out.write("\t\t\t\t\t\t\t// 页面跳转\n");
      out.write("\t\t\t\t\t\t\twindow.location.href = \"/WMS\";\n");
      out.write("\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t},\n");
      out.write("\t\t\t\t\terror:function(data){\n");
      out.write("\t\t\t\t\t\t// 处理错误\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t});\n");
      out.write("\t\t\t});\n");
      out.write("\t\t}\n");
      out.write("\t</script>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
